{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","state","_id","nombre","puesto","departamento","salario","empleados","toast","configure","this","obtenerEmpleados","e","target","name","value","setState","meth","url","mensaje","fetch","method","body","JSON","stringify","headers","then","res","json","data","console","log","catch","err","preventDefault","id","window","confirm","className","href","onSubmit","addEmpleado","htmlFor","type","onChange","handleChange","placeholder","map","empleado","onClick","updateEmpleado","deleteEmpleado","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24706849.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {toast, ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(){\n    super(); //Mandar al constructor padre, sirve para tener acceso a todas las clases que\n    //nos da React y trabajar con estados y propiedades\n    this.state = { //estado significa variables que están en memoria\n      _id: '',\n      nombre: '',\n      puesto: '',\n      departamento: '',\n      salario: 0,\n      empleados: []\n    }\n    toast.configure();\n  }\n  //Función que se ejecuta al momento de iniciar la aplicación\n  componentDidMount(){\n    //console.log(\"Componente cargado\");\n    this.obtenerEmpleados();\n  }//Fin de componentDidMount\n\n  handleChange(e){\n    const { name, value} = e.target;\n    this.setState({\n      [name]: value\n    });\n    //console.log(this.state);\n  }\n  addEmpleado(e) {\n    //console.log(this.state);\n    let meth = 'POST';\n    let url = 'http://localhost:3100/api/empleados';\n    let mensaje = 'Empleado agregado correctamente';\n    if (this.state._id) { //Actualizar un empleado\n      meth = 'PUT';\n      url+='/'+this.state._id;\n      mensaje = 'Empleado actualizado correctamente'\n      \n    }\n    fetch(url, {\n        method: meth,\n        body: JSON.stringify(this.state),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n         .then(res =>res.json())\n         .then(data=>{\n             toast(mensaje);\n             console.log(data)\n             this.setState({\n                _id: '',\n                nombre: '',\n                puesto: '',\n                departamento: '',\n                salario: 0\n             });\n             this.obtenerEmpleados();\n          })\n         .catch(err=>console.log(err))\n\n    //Evitar que se recargue la página al hacer click en el botón\n    e.preventDefault();\n  }//Fin de addEmpleado\n\n  obtenerEmpleados(){\n      fetch('http://localhost:3100/api/empleados')\n          .then(res=> res.json())\n          .then(data => this.setState({empleados: data}))\n          .catch(err => console.log(err));\n  }//Fin de obtenerEmpleados\n\n  updateEmpleado(id){\n    //console.log(id);\n    //Primero obtenemos el empleado de la base de datos\n    fetch('http://localhost:3100/api/empleados/'+id)\n          .then(res=>res.json())\n          .then(data=>{\n            //console.log(data)\n            this.setState({\n              _id: data._id,\n              nombre: data.nombre,\n              puesto: data.puesto,\n              departamento: data.departamento,\n              salario: data.salario\n            });\n          })\n          .catch(err=>console.log(err))\n\n  }//Fin del updateEmpleado\n\n  deleteEmpleado(id){\n    //console.log(id);\n    if (window.confirm('Desea eliminar este empleado?')){\n      fetch('http://localhost:3100/api/empleados/'+id,{\n        method: 'DELETE',\n        headers: {\n                  'Accept': 'application/json',\n                  'Content-Type': 'application/json'\n        }\n      })\n        .then(res=>res.json())\n        .then((data)=>{\n          console.log(data);\n          toast('Empleado eliminado correctamente');\n          this.obtenerEmpleados();\n        })\n        .catch(err => console.log(err))\n    }\n  }//Fin de deleteEmpleado\n\n  render () {\n      return (\n          <div className=\"App\">\n              <nav className=\"deep-purple darken-3\">\n                <div className=\"container\">\n                    <a className=\"brand-logo\" href=\"/\">\n                      Empleados\n                    </a>\n                </div>\n              </nav>\n              <ToastContainer />\n              <div className=\"container\">\n                    <div className=\"row\">\n                         {/* Formulario */}\n                         <div className=\"col s5\">\n                            <div className=\"card\">\n                                <div className=\"card-content\">\n                                <span className=\"card-title\">Datos del Empleado</span>\n                                    <form onSubmit={(e)=>this.addEmpleado(e)}>  \n                                        <div className=\"row\">\n                                            <div className=\"input-field col s12\">\n                                                 <label htmlFor=\"lnombre\">Nombre</label>\n                                                 <input type=\"text\" id=\"lnombre\"\n                                                        name =\"nombre\"\n                                                        onChange={(e)=>this.handleChange(e)}\n                                                        placeholder=\"Ingrese el nombre\" \n                                                        value={this.state.nombre}\n                                                />\n                                            </div>\n                                        </div>\n                                        <div className=\"row\">\n                                            <div className=\"input-field col s12\">\n                                                <label htmlFor=\"lpuesto\">Puesto</label>\n                                                 <input type=\"text\" id=\"lpuesto\"\n                                                        name=\"puesto\"\n                                                        onChange={(e)=>this.handleChange(e)}\n                                                        placeholder=\"Ingrese el puesto\" \n                                                        value={this.state.puesto}\n                                                />\n                                            </div>\n                                        </div>\n                                        <div className=\"row\">\n                                            <div className=\"input-field col s12\">\n                                                 <label htmlFor=\"ldepartamento\">Departamento</label>\n                                                 <input type=\"text\" id=\"ldepartamento\"\n                                                        name=\"departamento\"\n                                                        onChange={(e)=>this.handleChange(e)}\n                                                        placeholder=\"Ingrese el departamento\" \n                                                        value={this.state.departamento}\n                                                />\n                                            </div>\n                                        </div>\n                                        <div className=\"row\">\n                                            <div className=\"input-field col s12\">\n                                                 <label htmlFor=\"lsalario\">Salario</label>\n                                                 <input type=\"number\" id=\"lsalario\"\n                                                        name=\"salario\"\n                                                        onChange={(e)=>this.handleChange(e)}\n                                                        placeholder=\"Ingrese el salario\" \n                                                        value={this.state.salario}\n                                                />\n                                            </div>\n                                        </div>\n                                        <button type=\"submit\"\n                                                className=\"btn btn deep-purple darken-3\">\n                                            Guardar        \n                                        </button>\n                                    </form>\n                                </div>\n                            </div>\n                         </div>                     \n                         {/* Tabla de datos*/}\n                          <div className=\"col s7\">\n                              <table>\n                                  <thead>\n                                      <tr>\n                                          <th>Nombre</th>\n                                          <th>Puesto</th>\n                                          <th>Departamento</th>\n                                          <th>Operaciones</th>\n                                      </tr>\n                                  </thead>\n                                  <tbody>\n                                    {\n                                      this.state.empleados.map( empleado =>{\n                                        return (\n                                           <tr key={empleado._id}>\n                                              <td>{empleado.nombre}</td>\n                                              <td>{empleado.puesto}</td>\n                                              <td>{empleado.departamento}</td>\n                                              <td>{empleado.salario}</td>\n                                              <td>\n                                                  <button className=\"btn deep-purple darken-3\"\n                                                          onClick={()=>this.updateEmpleado(empleado._id)}\n                                                  >\n                                                      <i className=\"material-icons\">update</i>\n                                                  </button>\n                                                  <button className=\"btn red darken-4\"\n                                                          onClick={()=>this.deleteEmpleado(empleado._id)}\n                                                  >\n                                                      <i className=\"material-icons\">delete</i>\n                                                  </button>\n                                              </td>\n                                           </tr>\n                                        )\n                                      })\n                                    }\n                                  </tbody>\n                              </table>\n                          </div>\n                    </div>\n              </div>\n          </div>\n      );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}